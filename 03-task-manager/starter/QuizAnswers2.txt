1. In this lesson, you created a middleware function called asyncWrapper. Why?

    - The asyncWrapper middleware is created to handle asynchronous functions in route handlers. It wraps around asynchronous functions and catches any errors that might occur during their execution, forwarding them to the next middleware with the help of the next function. This ensures that errors in asynchronous code are properly handled in the Express application.

2. Suppose that you want to make sure that both a status code and an error message are sent back to the user when they request the URL for a task that does not exist. Assume that youâ€™ve created a CustomAPIError class and an error handler that references that class. Complete the code:

const getTask = asyncWrapper(async (req, res, next) => {
  const { id: taskID } = req.params;
  const task = await Task.findOne({ _id: taskID });
  if (!task) {
    const error = new CustomAPIError('Task not found', 404);
    return next(error);
  }
  res.status(200).json({ task });
});
